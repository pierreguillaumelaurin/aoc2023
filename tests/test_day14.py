from src.day14.day14 import (
    do_cycle,
    part_one,
    part_two,
    rotate_right,
    total_load,
    with_rocks_moved_north,
)

EXAMPLE_WITH_ROCKS_MOVED_NORTH = [
    ["O", "O", "O", "O", ".", "#", ".", "O", ".", "."],
    ["O", "O", ".", ".", "#", ".", ".", ".", ".", "#"],
    ["O", "O", ".", ".", "O", "#", "#", ".", ".", "O"],
    ["O", ".", ".", "#", ".", "O", "O", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
    [".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
    [".", ".", "O", ".", ".", "#", ".", "O", ".", "O"],
    [".", ".", "O", ".", ".", ".", ".", ".", ".", "."],
    ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
    ["#", ".", ".", ".", ".", "#", ".", ".", ".", "."],
]

EXAMPLE = [
    ["O", ".", ".", ".", ".", "#", ".", ".", ".", "."],
    ["O", ".", "O", "O", "#", ".", ".", ".", ".", "#"],
    [".", ".", ".", ".", ".", "#", "#", ".", ".", "."],
    ["O", "O", ".", "#", "O", ".", ".", ".", ".", "O"],
    [".", "O", ".", ".", ".", ".", ".", "O", "#", "."],
    ["O", ".", "#", ".", ".", "O", ".", "#", ".", "#"],
    [".", ".", "O", ".", ".", "#", "O", ".", ".", "O"],
    [".", ".", ".", ".", ".", ".", ".", "O", ".", "."],
    ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
    ["#", "O", "O", ".", ".", "#", ".", ".", ".", "."],
]


def test_with_rocks_moved_north():
    assert with_rocks_moved_north(EXAMPLE) == EXAMPLE_WITH_ROCKS_MOVED_NORTH


def test_total_load():
    assert total_load(EXAMPLE_WITH_ROCKS_MOVED_NORTH) == 136


def test_rotate_right():
    result = rotate_right(EXAMPLE)
    assert result[0] == ".#...#.O.."


def test_do_one_cycle():
    assert do_cycle(EXAMPLE) == [
        [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
        [".", ".", ".", ".", "#", ".", ".", ".", "O", "#"],
        [".", ".", ".", "O", "O", "#", "#", ".", ".", "."],
        [".", "O", "O", "#", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "O", "O", "O", "#", "."],
        [".", "O", "#", ".", ".", ".", "O", "#", ".", "#"],
        [".", ".", ".", ".", "O", "#", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", "O", "O", "O", "O"],
        ["#", ".", ".", ".", "O", "#", "#", "#", ".", "."],
        ["#", ".", ".", "O", "O", "#", ".", ".", ".", "."],
    ]


def test_do_two_cycles():
    assert do_cycle(do_cycle(EXAMPLE)) == [
        [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
        [".", ".", ".", ".", "#", ".", ".", ".", "O", "#"],
        [".", ".", ".", ".", ".", "#", "#", ".", ".", "."],
        [".", ".", "O", "#", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "O", "O", "O", "#", "."],
        [".", "O", "#", ".", ".", ".", "O", "#", ".", "#"],
        [".", ".", ".", ".", "O", "#", ".", ".", ".", "O"],
        [".", ".", ".", ".", ".", ".", ".", "O", "O", "O"],
        ["#", ".", ".", "O", "O", "#", "#", "#", ".", "."],
        ["#", ".", "O", "O", "O", "#", ".", ".", ".", "O"],
    ]


def test_part_one():
    assert part_one(EXAMPLE) == 136


def test_part_two():
    assert part_two(EXAMPLE) == 64
